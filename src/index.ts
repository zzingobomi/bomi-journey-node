import { app, BrowserWindow, ipcMain, Menu, session, Tray } from "electron";
import path from "path";
// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

let tray: any;
let mainWindow: BrowserWindow;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require("electron-squirrel-startup")) {
  app.quit();
}

const createWindow = (): BrowserWindow => {
  // Create the browser window.
  const window = new BrowserWindow({
    width: 1280,
    height: 720,
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
    },
    icon: path.join(__dirname, "icon.png"),
  });

  // and load the index.html of the app.
  window.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  // Open the DevTools.
  window.webContents.openDevTools();

  // TODO: connect 보안 추가 (* 대신 localhost, 도메인이름 추가하기)
  session.defaultSession.webRequest.onHeadersReceived((details, callback) => {
    callback({
      responseHeaders: {
        ...details.responseHeaders,
        "Content-Security-Policy": [
          `
          default-src 'self' 'unsafe-inline' data:; 
          script-src 'self' 'unsafe-eval' 'unsafe-inline' data:; 
          connect-src 'self' *
          `,
        ],
      },
    });
  });

  window.on("minimize", () => {
    window.hide();
    tray = createTray();
  });

  window.on("restore", () => {
    window.show();
    tray.destroy();
  });

  ipcMain.on("toMain", (event: any, data: any) => {
    console.log(`Received [${data}] from renderer browser`);
    window.webContents.send("fromMain", " here is main! ");
  });

  return window;
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on("ready", () => {
  mainWindow = createWindow();
});

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on("window-all-closed", () => {
  if (process.platform !== "darwin") {
    app.quit();
  }
});

app.on("activate", () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

function createTray() {
  let appIcon = new Tray(path.join(__dirname, "icon.png"));
  const contextMenu = Menu.buildFromTemplate([
    {
      label: "Show",
      click: () => {
        mainWindow.show();
      },
    },
    {
      label: "Exit",
      click: () => {
        app.quit();
      },
    },
  ]);

  appIcon.on("double-click", (event) => {
    mainWindow.show();
  });
  appIcon.setToolTip("BomiJourney");
  appIcon.setContextMenu(contextMenu);
  return appIcon;
}

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.
